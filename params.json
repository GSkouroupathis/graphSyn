{"name":"graphSyn","tagline":"Graph algorithms in one place","body":"graphSyn - a Python library for easy graphs\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n1) Import graph.py to your project\r\n2) Create a new Graph\r\n3) Apply its algorithms\r\n~~~~~~~~~~~~~\r\n\r\n~~~~\r\nFunction List:\r\n1) add_node(name): Adds a node to the graph\r\n2) add_edge(weight, f_node_name, s_node_name, both): Adds an edge to the graph. 'both' means the edge travels both ways\r\nall_paths(f_node, l_node): Returns all paths from f_node to l_node\r\n3) lazy_shortest_path(f_node, l_node): Returns the shortest path from f_node to l_node (Lazy)\r\n4) lazy_longest_path(f_node, l_node): Returns the longest path from f_node to l_node (Lazy)\r\n5) prim(): Runs Prim's algorithm to return the minimum spanning tree of the graph\r\n\tGraph has to be connected\r\n\tAlso all edges need to connect nodes in both directions\r\n6)dijkstra(s_node, f_node): Runs Dijkstra's algorithm to return shortest path from s_node to f_node and the distance\r\n7)alphastar(s_node, f_node, attr): Runs A* algorithm to return shortest path from s_node to f_node and the distance\r\n\tUses attr as the attribute with which it computers the A* Heuristic\r\n\tWarning: Since this algorithm is used in AI, make sure your graph doesn't contain any loops\r\n\tReturns None if no available path\r\n~~~~\r\nSee 'test.py' and 'test1.py' for examples\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}